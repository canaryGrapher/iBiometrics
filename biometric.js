// this challenge should be generated by the server
var challenge = new Uint8Array(32);
window.crypto.getRandomValues(challenge);

// this user ID should be autofilled either by the Web app, or be read through window variable
const generateChallenge = (userID) => {
    var id = Uint8Array.from(window.atob(userID), c => c.charCodeAt(0))
    return id
}

// generating the public key to be sent to the server
const generatePublicKey = (userID) => {
    var publicKey = {
        // A random challenge that is generated by the server. It is used to mitigate MITM attack
        challenge: generateChallenge(userID),
        // Information about relying party. rp.name is the only mandatory field. rp.name contains relying party friendly name. rp.icon contains a link to the RP icon that you want the authenticator to display. rp.id contains the relying party identifier
        rp: {
            name: 'ICICI Bank Limited',
            id: 'icicibank.com'
        },

        // Information about user. id, name and displayName fields are mandatory
        user: {
            id: id,
            name: 'user@example.com',
            displayName: 'user@example.com'
        },

        // A list of signing algorithms the server supports. Right now, FIDO2 servers are mandated to support RS1, RS256, ES256 and ED25519.
        pubKeyCredParams: [
            { type: 'public-key', alg: -7 },
            { type: 'public-key', alg: -257 }
        ],
        timeout: 600000,
        attestation: 'direct',
    }
}

function RegisterUser() {
    const GeneratedPublicKey = generatePublicKey("Kosv9fPtkDoh4Oz7Yq/pVgWHS8HhdlCto5cR0aBoVMw=")
    navigator.credentials.create({
        publicKey: GeneratedPublicKey
    })
}