import handleLogin from "./login";
import handleRegistration from "./registration";
import insertDialog from "./prompt";

// this challenge should be generated by the server
var challenge = new Uint8Array(32);
window.crypto.getRandomValues(challenge);



// function RegisterUser() {
//     const GeneratedPublicKey = credentialOptions("Kosv9fPtkDoh4Oz7Yq/pVgWHS8HhdlCto5cR0aBoVMw=")
//     const credentials = navigator.credentials.create({
//         publicKey: GeneratedPublicKey
//     })
//     console.log(credentials)
// }


const checkPlatformAuthenticationAvailability = async () => {
    const isAuthPossible = await PublicKeyCredential.isUserVerifyingPlatformAuthenticatorAvailable()
    if (isAuthPossible) {
        return true
    } else {
        return false
    }
}

document.addEventListener('DOMContentLoaded', async () => {
    const isProceedPossible = await checkPlatformAuthenticationAvailability()
    console.log("check if platform supports authentication")
    if (isProceedPossible) {
        console.log("It does support authentication. Inititalizing registration");
        const alreadyRegistered = window.localStorage.getItem("registrationDone")
        console.log("Already registered state: " + alreadyRegistered)
        if (alreadyRegistered == "true") {
            console.log("Trying to login")
            handleLogin()
        } else {
            insertDialog()
        }
        document.querySelector(".iBiometric_closeButton")?.addEventListener("click", () => {
            const dialogContainer = document.querySelector('.iBiometric_container');
            dialogContainer.style.display = 'none';
        })
        document.querySelector("#iBiometric_invokeBiometricRegistration")?.addEventListener("click", () => {
            const dialogContainer = document.querySelector('.iBiometric_container');
            dialogContainer.style.display = 'none';
            handleRegistration()
        })
    }
    else {
        alert('Registration not possible')
    }
})